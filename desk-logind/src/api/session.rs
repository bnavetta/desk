#![allow(clippy::all)]
// This code was autogenerated with `dbus-codegen-rust -s -d org.freedesktop.login1 -p /org/freedesktop/login1/session/self -c blocking -m None -f org.freedesktop.login1.Session -o desk-logind/src/api/session.rs`, see https://github.com/diwic/dbus-rs

use dbus;
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopLogin1Session {
    fn terminate(&self) -> Result<(), dbus::Error>;
    fn activate(&self) -> Result<(), dbus::Error>;
    fn lock(&self) -> Result<(), dbus::Error>;
    fn unlock(&self) -> Result<(), dbus::Error>;
    fn set_idle_hint_(&self, arg0: bool) -> Result<(), dbus::Error>;
    fn set_locked_hint_(&self, arg0: bool) -> Result<(), dbus::Error>;
    fn kill(&self, arg0: &str, arg1: i32) -> Result<(), dbus::Error>;
    fn take_control(&self, arg0: bool) -> Result<(), dbus::Error>;
    fn release_control(&self) -> Result<(), dbus::Error>;
    fn take_device(&self, arg0: u32, arg1: u32) -> Result<(arg::OwnedFd, bool), dbus::Error>;
    fn release_device(&self, arg0: u32, arg1: u32) -> Result<(), dbus::Error>;
    fn pause_device_complete(&self, arg0: u32, arg1: u32) -> Result<(), dbus::Error>;
    fn set_brightness(&self, arg0: &str, arg1: &str, arg2: u32) -> Result<(), dbus::Error>;
    fn id(&self) -> Result<String, dbus::Error>;
    fn user(&self) -> Result<(u32, dbus::Path<'static>), dbus::Error>;
    fn name(&self) -> Result<String, dbus::Error>;
    fn timestamp(&self) -> Result<u64, dbus::Error>;
    fn timestamp_monotonic(&self) -> Result<u64, dbus::Error>;
    fn vtnr(&self) -> Result<u32, dbus::Error>;
    fn seat(&self) -> Result<(String, dbus::Path<'static>), dbus::Error>;
    fn tty(&self) -> Result<String, dbus::Error>;
    fn display(&self) -> Result<String, dbus::Error>;
    fn remote(&self) -> Result<bool, dbus::Error>;
    fn remote_host(&self) -> Result<String, dbus::Error>;
    fn remote_user(&self) -> Result<String, dbus::Error>;
    fn service(&self) -> Result<String, dbus::Error>;
    fn desktop(&self) -> Result<String, dbus::Error>;
    fn scope(&self) -> Result<String, dbus::Error>;
    fn leader(&self) -> Result<u32, dbus::Error>;
    fn audit(&self) -> Result<u32, dbus::Error>;
    fn type_(&self) -> Result<String, dbus::Error>;
    fn class(&self) -> Result<String, dbus::Error>;
    fn active(&self) -> Result<bool, dbus::Error>;
    fn state(&self) -> Result<String, dbus::Error>;
    fn idle_hint(&self) -> Result<bool, dbus::Error>;
    fn idle_since_hint(&self) -> Result<u64, dbus::Error>;
    fn idle_since_hint_monotonic(&self) -> Result<u64, dbus::Error>;
    fn locked_hint(&self) -> Result<bool, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::Connection>> OrgFreedesktopLogin1Session
    for blocking::Proxy<'a, C>
{
    fn terminate(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "Terminate", ())
    }

    fn activate(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "Activate", ())
    }

    fn lock(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "Lock", ())
    }

    fn unlock(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "Unlock", ())
    }

    fn set_idle_hint_(&self, arg0: bool) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "SetIdleHint", (arg0,))
    }

    fn set_locked_hint_(&self, arg0: bool) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "SetLockedHint", (arg0,))
    }

    fn kill(&self, arg0: &str, arg1: i32) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "Kill", (arg0, arg1))
    }

    fn take_control(&self, arg0: bool) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "TakeControl", (arg0,))
    }

    fn release_control(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "ReleaseControl", ())
    }

    fn take_device(&self, arg0: u32, arg1: u32) -> Result<(arg::OwnedFd, bool), dbus::Error> {
        self.method_call("org.freedesktop.login1.Session", "TakeDevice", (arg0, arg1))
    }

    fn release_device(&self, arg0: u32, arg1: u32) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.login1.Session",
            "ReleaseDevice",
            (arg0, arg1),
        )
    }

    fn pause_device_complete(&self, arg0: u32, arg1: u32) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.login1.Session",
            "PauseDeviceComplete",
            (arg0, arg1),
        )
    }

    fn set_brightness(&self, arg0: &str, arg1: &str, arg2: u32) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.login1.Session",
            "SetBrightness",
            (arg0, arg1, arg2),
        )
    }

    fn id(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Id",
        )
    }

    fn user(&self) -> Result<(u32, dbus::Path<'static>), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "User",
        )
    }

    fn name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Name",
        )
    }

    fn timestamp(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Timestamp",
        )
    }

    fn timestamp_monotonic(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "TimestampMonotonic",
        )
    }

    fn vtnr(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "VTNr",
        )
    }

    fn seat(&self) -> Result<(String, dbus::Path<'static>), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Seat",
        )
    }

    fn tty(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "TTY",
        )
    }

    fn display(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Display",
        )
    }

    fn remote(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Remote",
        )
    }

    fn remote_host(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "RemoteHost",
        )
    }

    fn remote_user(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "RemoteUser",
        )
    }

    fn service(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Service",
        )
    }

    fn desktop(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Desktop",
        )
    }

    fn scope(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Scope",
        )
    }

    fn leader(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Leader",
        )
    }

    fn audit(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Audit",
        )
    }

    fn type_(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Type",
        )
    }

    fn class(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Class",
        )
    }

    fn active(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "Active",
        )
    }

    fn state(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "State",
        )
    }

    fn idle_hint(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "IdleHint",
        )
    }

    fn idle_since_hint(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "IdleSinceHint",
        )
    }

    fn idle_since_hint_monotonic(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "IdleSinceHintMonotonic",
        )
    }

    fn locked_hint(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.login1.Session",
            "LockedHint",
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopLogin1SessionPauseDevice {
    pub arg0: u32,
    pub arg1: u32,
    pub arg2: String,
}

impl arg::AppendAll for OrgFreedesktopLogin1SessionPauseDevice {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
        arg::RefArg::append(&self.arg1, i);
        arg::RefArg::append(&self.arg2, i);
    }
}

impl arg::ReadAll for OrgFreedesktopLogin1SessionPauseDevice {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopLogin1SessionPauseDevice {
            arg0: i.read()?,
            arg1: i.read()?,
            arg2: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopLogin1SessionPauseDevice {
    const NAME: &'static str = "PauseDevice";
    const INTERFACE: &'static str = "org.freedesktop.login1.Session";
}

#[derive(Debug)]
pub struct OrgFreedesktopLogin1SessionResumeDevice {
    pub arg0: u32,
    pub arg1: u32,
    pub arg2: arg::OwnedFd,
}

impl arg::AppendAll for OrgFreedesktopLogin1SessionResumeDevice {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
        arg::RefArg::append(&self.arg1, i);
        arg::RefArg::append(&self.arg2, i);
    }
}

impl arg::ReadAll for OrgFreedesktopLogin1SessionResumeDevice {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopLogin1SessionResumeDevice {
            arg0: i.read()?,
            arg1: i.read()?,
            arg2: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopLogin1SessionResumeDevice {
    const NAME: &'static str = "ResumeDevice";
    const INTERFACE: &'static str = "org.freedesktop.login1.Session";
}

#[derive(Debug)]
pub struct OrgFreedesktopLogin1SessionLock {}

impl arg::AppendAll for OrgFreedesktopLogin1SessionLock {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for OrgFreedesktopLogin1SessionLock {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopLogin1SessionLock {})
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopLogin1SessionLock {
    const NAME: &'static str = "Lock";
    const INTERFACE: &'static str = "org.freedesktop.login1.Session";
}

#[derive(Debug)]
pub struct OrgFreedesktopLogin1SessionUnlock {}

impl arg::AppendAll for OrgFreedesktopLogin1SessionUnlock {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for OrgFreedesktopLogin1SessionUnlock {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopLogin1SessionUnlock {})
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopLogin1SessionUnlock {
    const NAME: &'static str = "Unlock";
    const INTERFACE: &'static str = "org.freedesktop.login1.Session";
}
